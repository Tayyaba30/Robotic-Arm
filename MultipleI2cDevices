
/*
MPU6050.cpp - Class file for the MPU6050 Triple Axis Gyroscope & Accelerometer Arduino Library.
Version: 1.0.3
(c) 2014-2015 Korneliusz Jarzebski
www.jarzebski.pl

*/


#include <Servo.h>

#include <MPU6050.h>
#define MPU_2_ADDR  (0x69)

MPU6050 mpu;  // AD0 must be low
MPU6050 mpu2; // AD0 must be high

#include<Wire.h>

Servo servo0;
Servo servo1;
Servo servo2;
Servo servo3;

#define TOTAL_MOTOR_TASKS 4
const Servo SERVO_PORTS[] = {servo0, servo1, servo2, servo3};

volatile int flag_count = 0;

void setup() {
  // put your setup code here, to run once:

   Serial.begin(9600);

   servo0.attach(2, 1000, 2000); // port 0
   servo0.write(90);
   servo1.attach(3, 1000, 2000); // port 1
   servo1.write(90);
   servo2.attach(4, 1000, 2000); // port 2
   servo2.write(90);
   servo3.attach(5, 1000, 2000); // port 3
   servo3.write(90);
  while(!mpu.begin(MPU6050_SCALE_2000DPS, MPU6050_RANGE_2G))
  {
    Serial.println("Could not find a valid MPU6050 sensor");
    delay(500);
  }
  while(!mpu2.begin(MPU6050_SCALE_2000DPS, MPU6050_RANGE_2G, MPU_2_ADDR))
  {
    Serial.println("Could not find a valid MPU6050 2 sensor");
    delay(500);
  }
  mpu.calibrateGyro();
  mpu.setThreshold(3);
  mpu2.calibrateGyro();
  mpu2.setThreshold(3);

  //  //http://www.8bit-era.cz/arduino-timer-interrupts-calculator.html
  
  // TIMER 0 for interrupt frequency 1000 Hz:
  cli(); // stop interrupts
  TCCR0A = 0; // set entire TCCR0A register to 0
  TCCR0B = 0; // same for TCCR0B
  TCNT0  = 0; // initialize counter value to 0
  // set compare match register for 1000 Hz increments
  OCR0A = 249; // = 16000000 / (64 * 1000) - 1 (must be <256)
  // turn on CTC mode
  TCCR0B |= (1 << WGM01);
  // Set CS02, CS01 and CS00 bits for 64 prescaler
  TCCR0B |= (0 << CS02) | (1 << CS01) | (1 << CS00);
  // enable timer compare interrupt
  TIMSK0 |= (1 << OCIE0A);
  sei(); // allow interrupts

}

ISR(TIMER0_COMPA_vect)
{
//  Serial.print("flag set");
  ++flag_count;
  TCNT0 = 0;
}

void moveMotor(int Blink, Servo s)
{

  s.write(Blink);
}

struct MotorTask{
  int TaskNumber; // stores the task
  Servo servo;        // Stores the servo that we want to blink
  int setState;   // Stores what angle to set the motor    

  void getCase() // no need to call
  {
    Serial.print("motor task ");
    Serial.print(TaskNumber);

  }
};



struct MotorTask Perform[TOTAL_MOTOR_TASKS];



void motorTask(int task)  
{
    
  Perform[task].TaskNumber = task;    // set the task number
  Perform[task].servo = SERVO_PORTS[task]; //set which servo we are interacting with
  moveMotor(Perform[task].setState, Perform[task].servo);
}

void PitchTask(int task){
  if(task %2 ==0)
  {
     Vector valuesAcc = mpu.readNormalizeAccel(); 
    int pitchAngle = -(atan2(valuesAcc.XAxis, sqrt(valuesAcc.YAxis*valuesAcc.YAxis + valuesAcc.ZAxis*valuesAcc.ZAxis))*180.0)/M_PI;
    Perform[task].setState = pitchAngle;
  }
  else
  {
     Vector valuesAcc = mpu2.readNormalizeAccel();
    int pitchAngle = -(atan2(valuesAcc.XAxis, sqrt(valuesAcc.YAxis*valuesAcc.YAxis + valuesAcc.ZAxis*valuesAcc.ZAxis))*180.0)/M_PI;
    Perform[task].setState = pitchAngle;
  }

}
 
void RollTask(int task){
  if(task %2 ==0)
  {
     Vector valuesAcc = mpu.readNormalizeAccel(); 
     int rollAngle = (atan2(valuesAcc.YAxis, valuesAcc.ZAxis)*180.0)/M_PI;
      Perform[task].setState = rollAngle;
  }
  else
  {
     Vector valuesAcc = mpu2.readNormalizeAccel();
     int rollAngle = (atan2(valuesAcc.YAxis, valuesAcc.ZAxis)*180.0)/M_PI;
     Perform[task].setState = rollAngle;
  }
}



//OS information Part2
void (*tasks[])(int) = {PitchTask, PitchTask,RollTask, RollTask,
                          motorTask,  motorTask, motorTask, motorTask};

int taskCount = 8;

void genericOS()
{

  while(true)
  {
    for(int t = 0; t<taskCount; ++t)
    {

          (*tasks[t])(t);
    }
   
    while(flag_count < 10){} // intervals of 10ms
//    cli(); // stop interrupts
    flag_count = 0;
    TCNT0 = 0;
//    sei(); // allow interrupts
  }
}


void loop() {
  Serial.println("OS Begin");
  genericOS();

}
